---
# This playbook will configure a RHUA and multiple CDS(es)
#  additionally an EBS volume will be created and configured through a LVM 
#  to provide extra file storage for the pulp content
#
#  The host names created by this playbook will be recorded in the 
#    $RHUI_HOST_FILE environment variable
#
#  It is intended other scripts will use the $RHUI_HOST_FILE inventory file 
#   to perform further configuration steps on these instances
#
#
#  Playbook assumes the following:
#  - Security groups exists ahead of time
#     - rhui_dev_rhua
#     - rhui_dev_cds

# TODO:
#  1) Expand root filesystem to 50GB to provide more room for logs & mongodb
#  2) Tag the EBS volume that's created so we can keep track
#     - How do we collect a list of items, when we are iterating through a list?  
#     - will register still work?
#

- name: Stage instance(s)
  hosts: localhost
  connection: local
  user: root
  gather_facts: false

  tags:
      - stage

  vars:
      keypair: splice
      instance_type: m1.large
      rhua_security_group: rhui_dev_rhua
      cds_security_group: rhui_dev_cds
      image: ami-f6f16b9f
      cds_instance_count: 2
      rhui_hosts_file: "{{ lookup('env', 'RHUI_HOSTS_FILE') }}"
      ebs_pulp_data_size: 100
      ebs_pulp_data_part: sdh

  tasks:
    - local_action: shell id -u -n
      register: user_name

    - local_action: shell date +"%Y-%m-%d"
      register: datestamp

    - name: Launch RHUA instance
      local_action:
        module: ec2
        keypair: ${keypair}
        group: ${rhua_security_group}
        instance_type: ${instance_type}
        image: ${image}
        wait: yes
        count: 1
        instance_tags: '{"Name": "{{ user_name.stdout }} RHUA {{ datestamp.stdout }}"}'
      register: ec2_rhua

    - name: Launch CDS instance(s)
      local_action:
        module: ec2
        keypair: ${keypair}
        group: ${cds_security_group}
        instance_type: ${instance_type}
        image: ${image}
        wait: yes
        count: ${cds_instance_count}
        instance_tags: '{"Name": "{{ user_name.stdout }} CDS {{ datestamp.stdout }}"}'
      register: ec2_cds

    - name: Add rhua instance to rhua group
      local_action: add_host name=${item.public_dns_name} groups=rhua
      with_items: ${ec2_rhua.instances}

    - name: Add cds instances to cds group
      local_action: add_host name=${item.public_dns_name} groups=cds
      with_items: ${ec2_cds.instances}

    - name: Add rhua instance to servers group
      local_action: add_host name=${item.public_dns_name} groups=servers
      with_items: ${ec2_rhua.instances}

    - name: Add cds instance(s) to servers group
      local_action: add_host name=${item.public_dns_name} groups=servers
      with_items: ${ec2_cds.instances}

    - name: Create a volume for pulp content and attach for the rhua
      local_action: ec2_vol volume_size=${ebs_pulp_data_size} instance=${item.id} device_name=${ebs_pulp_data_part}
      with_items: ${ec2_rhua.instances}

    - name: Create a volume for pulp content and attach for the cds
      local_action: ec2_vol volume_size=${ebs_pulp_data_size} instance=${item.id} device_name=${ebs_pulp_data_part}
      with_items: ${ec2_cds.instances}

    - name: Wait for SSH to be available on all servers
      local_action: wait_for host=${item} port=22
      with_items: ${groups.servers}

    - name: Write [rhua] header into {{rhui_hosts_file}}
      local_action: shell echo '[rhua]' >> ${rhui_hosts_file}

    #
    # Usage of 'with_indexed_items' isn't needed for below examples,
    # yet is being used so we gain familiarity and can use the index when we 
    # need to assign designations such as cds-1, cds-2 in future tasks
    #    
    - name: Write rhua info into {{rhui_hosts_file}}
      local_action: shell echo '{{ item.1 }}' >> ${rhui_hosts_file}
      with_indexed_items: ${groups.rhua}

    - name: Write [cds] header into {{rhui_hosts_file}}
      local_action: shell echo '[cds]' >> ${rhui_hosts_file}
    
    - name: Write cds info into {{rhui_hosts_file}}
      local_action: shell echo '{{ item.1 }}' >> ${rhui_hosts_file}
      with_indexed_items: ${groups.cds}


- name: Create LVM file systems for RHUA
  hosts: rhua
  user: ec2-user
  sudo: yes
  gather_facts: true

  tags:
    - lvm

  vars:
    - ebs_pulp_part: /dev/xvdl
    - vg: vg0
    - vol_name: vol1
    - var_lib_pulp_part: /dev/${vg}/${vol_name}
    - pulp_mount_point: /var/lib/pulp

  tasks:
    - name: Create PV for Volume group
      command: pvcreate ${ebs_pulp_part}

    - name: Create Volume Group
      command: vgcreate ${vg} ${ebs_pulp_part}

    - name: Create Logical Volume
      command: lvcreate -l 100%FREE -n ${vol_name} ${vg}

    - name: Create filesystem on new LV
      command: /sbin/mkfs.ext3 -q ${var_lib_pulp_part}

    - name: Create /var/lib/pulp mount point 
      command: mkdir ${pulp_mount_point}

    - name: Mount EBS volume
      action: mount name=${pulp_mount_point} src=${var_lib_pulp_part} fstype=ext3 state=mounted


- name: Create LVM file systems for CDS(es)
  hosts: cds
  user: ec2-user
  sudo: yes
  gather_facts: true

  tags:
    - lvm

  vars:
    - ebs_pulp_part: /dev/xvdl
    - vg: vg0
    - vol_name: vol1
    - var_lib_pulp_part: /dev/${vg}/${vol_name}
    - pulp_mount_point: /var/lib/pulp-cds

  tasks:
    - name: Create PV for Volume group
      command: pvcreate ${ebs_pulp_part}

    - name: Create Volume Group
      command: vgcreate ${vg} ${ebs_pulp_part}

    - name: Create Logical Volume
      command: lvcreate -l 100%FREE -n ${vol_name} ${vg}

    - name: Create filesystem on new LV
      command: /sbin/mkfs.ext3 -q ${var_lib_pulp_part}

    - name: Create /var/lib/pulp mount point 
      command: mkdir ${pulp_mount_point}

    - name: Mount EBS volume
      action: mount name=${pulp_mount_point} src=${var_lib_pulp_part} fstype=ext3 state=mounted
